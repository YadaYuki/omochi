// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/YadaYuki/omochi/app/ent/invertindexcompressed"
	"github.com/YadaYuki/omochi/app/ent/term"
	"github.com/google/uuid"
)

// InvertIndexCompressed is the model entity for the InvertIndexCompressed schema.
type InvertIndexCompressed struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// PostingListCompressed holds the value of the "posting_list_compressed" field.
	PostingListCompressed []byte `json:"posting_list_compressed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvertIndexCompressedQuery when eager-loading is set.
	Edges                        InvertIndexCompressedEdges `json:"edges"`
	term_invert_index_compressed *uuid.UUID
}

// InvertIndexCompressedEdges holds the relations/edges for other nodes in the graph.
type InvertIndexCompressedEdges struct {
	// TermRelated holds the value of the term_related edge.
	TermRelated *Term `json:"term_related,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TermRelatedOrErr returns the TermRelated value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvertIndexCompressedEdges) TermRelatedOrErr() (*Term, error) {
	if e.loadedTypes[0] {
		if e.TermRelated == nil {
			// The edge term_related was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: term.Label}
		}
		return e.TermRelated, nil
	}
	return nil, &NotLoadedError{edge: "term_related"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InvertIndexCompressed) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case invertindexcompressed.FieldPostingListCompressed:
			values[i] = new([]byte)
		case invertindexcompressed.FieldCreatedAt, invertindexcompressed.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case invertindexcompressed.FieldID:
			values[i] = new(uuid.UUID)
		case invertindexcompressed.ForeignKeys[0]: // term_invert_index_compressed
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type InvertIndexCompressed", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InvertIndexCompressed fields.
func (iic *InvertIndexCompressed) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case invertindexcompressed.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				iic.ID = *value
			}
		case invertindexcompressed.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				iic.CreatedAt = value.Time
			}
		case invertindexcompressed.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				iic.UpdatedAt = value.Time
			}
		case invertindexcompressed.FieldPostingListCompressed:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field posting_list_compressed", values[i])
			} else if value != nil {
				iic.PostingListCompressed = *value
			}
		case invertindexcompressed.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field term_invert_index_compressed", values[i])
			} else if value.Valid {
				iic.term_invert_index_compressed = new(uuid.UUID)
				*iic.term_invert_index_compressed = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryTermRelated queries the "term_related" edge of the InvertIndexCompressed entity.
func (iic *InvertIndexCompressed) QueryTermRelated() *TermQuery {
	return (&InvertIndexCompressedClient{config: iic.config}).QueryTermRelated(iic)
}

// Update returns a builder for updating this InvertIndexCompressed.
// Note that you need to call InvertIndexCompressed.Unwrap() before calling this method if this InvertIndexCompressed
// was returned from a transaction, and the transaction was committed or rolled back.
func (iic *InvertIndexCompressed) Update() *InvertIndexCompressedUpdateOne {
	return (&InvertIndexCompressedClient{config: iic.config}).UpdateOne(iic)
}

// Unwrap unwraps the InvertIndexCompressed entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (iic *InvertIndexCompressed) Unwrap() *InvertIndexCompressed {
	tx, ok := iic.config.driver.(*txDriver)
	if !ok {
		panic("ent: InvertIndexCompressed is not a transactional entity")
	}
	iic.config.driver = tx.drv
	return iic
}

// String implements the fmt.Stringer.
func (iic *InvertIndexCompressed) String() string {
	var builder strings.Builder
	builder.WriteString("InvertIndexCompressed(")
	builder.WriteString(fmt.Sprintf("id=%v", iic.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(iic.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(iic.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", posting_list_compressed=")
	builder.WriteString(fmt.Sprintf("%v", iic.PostingListCompressed))
	builder.WriteByte(')')
	return builder.String()
}

// InvertIndexCompresseds is a parsable slice of InvertIndexCompressed.
type InvertIndexCompresseds []*InvertIndexCompressed

func (iic InvertIndexCompresseds) config(cfg config) {
	for _i := range iic {
		iic[_i].config = cfg
	}
}
