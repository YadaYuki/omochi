// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/YadaYuki/omochi/app/ent/invertindexcompressed"
	"github.com/YadaYuki/omochi/app/ent/predicate"
	"github.com/YadaYuki/omochi/app/ent/term"
	"github.com/google/uuid"
)

// InvertIndexCompressedUpdate is the builder for updating InvertIndexCompressed entities.
type InvertIndexCompressedUpdate struct {
	config
	hooks    []Hook
	mutation *InvertIndexCompressedMutation
}

// Where appends a list predicates to the InvertIndexCompressedUpdate builder.
func (iicu *InvertIndexCompressedUpdate) Where(ps ...predicate.InvertIndexCompressed) *InvertIndexCompressedUpdate {
	iicu.mutation.Where(ps...)
	return iicu
}

// SetUpdatedAt sets the "updated_at" field.
func (iicu *InvertIndexCompressedUpdate) SetUpdatedAt(t time.Time) *InvertIndexCompressedUpdate {
	iicu.mutation.SetUpdatedAt(t)
	return iicu
}

// SetPostingListCompressed sets the "posting_list_compressed" field.
func (iicu *InvertIndexCompressedUpdate) SetPostingListCompressed(b []byte) *InvertIndexCompressedUpdate {
	iicu.mutation.SetPostingListCompressed(b)
	return iicu
}

// AddTermIDs adds the "term" edge to the Term entity by IDs.
func (iicu *InvertIndexCompressedUpdate) AddTermIDs(ids ...uuid.UUID) *InvertIndexCompressedUpdate {
	iicu.mutation.AddTermIDs(ids...)
	return iicu
}

// AddTerm adds the "term" edges to the Term entity.
func (iicu *InvertIndexCompressedUpdate) AddTerm(t ...*Term) *InvertIndexCompressedUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iicu.AddTermIDs(ids...)
}

// Mutation returns the InvertIndexCompressedMutation object of the builder.
func (iicu *InvertIndexCompressedUpdate) Mutation() *InvertIndexCompressedMutation {
	return iicu.mutation
}

// ClearTerm clears all "term" edges to the Term entity.
func (iicu *InvertIndexCompressedUpdate) ClearTerm() *InvertIndexCompressedUpdate {
	iicu.mutation.ClearTerm()
	return iicu
}

// RemoveTermIDs removes the "term" edge to Term entities by IDs.
func (iicu *InvertIndexCompressedUpdate) RemoveTermIDs(ids ...uuid.UUID) *InvertIndexCompressedUpdate {
	iicu.mutation.RemoveTermIDs(ids...)
	return iicu
}

// RemoveTerm removes "term" edges to Term entities.
func (iicu *InvertIndexCompressedUpdate) RemoveTerm(t ...*Term) *InvertIndexCompressedUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iicu.RemoveTermIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iicu *InvertIndexCompressedUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	iicu.defaults()
	if len(iicu.hooks) == 0 {
		if err = iicu.check(); err != nil {
			return 0, err
		}
		affected, err = iicu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InvertIndexCompressedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iicu.check(); err != nil {
				return 0, err
			}
			iicu.mutation = mutation
			affected, err = iicu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iicu.hooks) - 1; i >= 0; i-- {
			if iicu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iicu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iicu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iicu *InvertIndexCompressedUpdate) SaveX(ctx context.Context) int {
	affected, err := iicu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iicu *InvertIndexCompressedUpdate) Exec(ctx context.Context) error {
	_, err := iicu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iicu *InvertIndexCompressedUpdate) ExecX(ctx context.Context) {
	if err := iicu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iicu *InvertIndexCompressedUpdate) defaults() {
	if _, ok := iicu.mutation.UpdatedAt(); !ok {
		v := invertindexcompressed.UpdateDefaultUpdatedAt()
		iicu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iicu *InvertIndexCompressedUpdate) check() error {
	if v, ok := iicu.mutation.PostingListCompressed(); ok {
		if err := invertindexcompressed.PostingListCompressedValidator(v); err != nil {
			return &ValidationError{Name: "posting_list_compressed", err: fmt.Errorf(`ent: validator failed for field "InvertIndexCompressed.posting_list_compressed": %w`, err)}
		}
	}
	return nil
}

func (iicu *InvertIndexCompressedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   invertindexcompressed.Table,
			Columns: invertindexcompressed.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: invertindexcompressed.FieldID,
			},
		},
	}
	if ps := iicu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iicu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: invertindexcompressed.FieldUpdatedAt,
		})
	}
	if value, ok := iicu.mutation.PostingListCompressed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: invertindexcompressed.FieldPostingListCompressed,
		})
	}
	if iicu.mutation.TermCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invertindexcompressed.TermTable,
			Columns: []string{invertindexcompressed.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: term.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iicu.mutation.RemovedTermIDs(); len(nodes) > 0 && !iicu.mutation.TermCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invertindexcompressed.TermTable,
			Columns: []string{invertindexcompressed.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iicu.mutation.TermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invertindexcompressed.TermTable,
			Columns: []string{invertindexcompressed.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iicu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invertindexcompressed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// InvertIndexCompressedUpdateOne is the builder for updating a single InvertIndexCompressed entity.
type InvertIndexCompressedUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvertIndexCompressedMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (iicuo *InvertIndexCompressedUpdateOne) SetUpdatedAt(t time.Time) *InvertIndexCompressedUpdateOne {
	iicuo.mutation.SetUpdatedAt(t)
	return iicuo
}

// SetPostingListCompressed sets the "posting_list_compressed" field.
func (iicuo *InvertIndexCompressedUpdateOne) SetPostingListCompressed(b []byte) *InvertIndexCompressedUpdateOne {
	iicuo.mutation.SetPostingListCompressed(b)
	return iicuo
}

// AddTermIDs adds the "term" edge to the Term entity by IDs.
func (iicuo *InvertIndexCompressedUpdateOne) AddTermIDs(ids ...uuid.UUID) *InvertIndexCompressedUpdateOne {
	iicuo.mutation.AddTermIDs(ids...)
	return iicuo
}

// AddTerm adds the "term" edges to the Term entity.
func (iicuo *InvertIndexCompressedUpdateOne) AddTerm(t ...*Term) *InvertIndexCompressedUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iicuo.AddTermIDs(ids...)
}

// Mutation returns the InvertIndexCompressedMutation object of the builder.
func (iicuo *InvertIndexCompressedUpdateOne) Mutation() *InvertIndexCompressedMutation {
	return iicuo.mutation
}

// ClearTerm clears all "term" edges to the Term entity.
func (iicuo *InvertIndexCompressedUpdateOne) ClearTerm() *InvertIndexCompressedUpdateOne {
	iicuo.mutation.ClearTerm()
	return iicuo
}

// RemoveTermIDs removes the "term" edge to Term entities by IDs.
func (iicuo *InvertIndexCompressedUpdateOne) RemoveTermIDs(ids ...uuid.UUID) *InvertIndexCompressedUpdateOne {
	iicuo.mutation.RemoveTermIDs(ids...)
	return iicuo
}

// RemoveTerm removes "term" edges to Term entities.
func (iicuo *InvertIndexCompressedUpdateOne) RemoveTerm(t ...*Term) *InvertIndexCompressedUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iicuo.RemoveTermIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iicuo *InvertIndexCompressedUpdateOne) Select(field string, fields ...string) *InvertIndexCompressedUpdateOne {
	iicuo.fields = append([]string{field}, fields...)
	return iicuo
}

// Save executes the query and returns the updated InvertIndexCompressed entity.
func (iicuo *InvertIndexCompressedUpdateOne) Save(ctx context.Context) (*InvertIndexCompressed, error) {
	var (
		err  error
		node *InvertIndexCompressed
	)
	iicuo.defaults()
	if len(iicuo.hooks) == 0 {
		if err = iicuo.check(); err != nil {
			return nil, err
		}
		node, err = iicuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InvertIndexCompressedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iicuo.check(); err != nil {
				return nil, err
			}
			iicuo.mutation = mutation
			node, err = iicuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iicuo.hooks) - 1; i >= 0; i-- {
			if iicuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iicuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iicuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iicuo *InvertIndexCompressedUpdateOne) SaveX(ctx context.Context) *InvertIndexCompressed {
	node, err := iicuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iicuo *InvertIndexCompressedUpdateOne) Exec(ctx context.Context) error {
	_, err := iicuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iicuo *InvertIndexCompressedUpdateOne) ExecX(ctx context.Context) {
	if err := iicuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iicuo *InvertIndexCompressedUpdateOne) defaults() {
	if _, ok := iicuo.mutation.UpdatedAt(); !ok {
		v := invertindexcompressed.UpdateDefaultUpdatedAt()
		iicuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iicuo *InvertIndexCompressedUpdateOne) check() error {
	if v, ok := iicuo.mutation.PostingListCompressed(); ok {
		if err := invertindexcompressed.PostingListCompressedValidator(v); err != nil {
			return &ValidationError{Name: "posting_list_compressed", err: fmt.Errorf(`ent: validator failed for field "InvertIndexCompressed.posting_list_compressed": %w`, err)}
		}
	}
	return nil
}

func (iicuo *InvertIndexCompressedUpdateOne) sqlSave(ctx context.Context) (_node *InvertIndexCompressed, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   invertindexcompressed.Table,
			Columns: invertindexcompressed.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: invertindexcompressed.FieldID,
			},
		},
	}
	id, ok := iicuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InvertIndexCompressed.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iicuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invertindexcompressed.FieldID)
		for _, f := range fields {
			if !invertindexcompressed.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invertindexcompressed.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iicuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iicuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: invertindexcompressed.FieldUpdatedAt,
		})
	}
	if value, ok := iicuo.mutation.PostingListCompressed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: invertindexcompressed.FieldPostingListCompressed,
		})
	}
	if iicuo.mutation.TermCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invertindexcompressed.TermTable,
			Columns: []string{invertindexcompressed.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: term.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iicuo.mutation.RemovedTermIDs(); len(nodes) > 0 && !iicuo.mutation.TermCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invertindexcompressed.TermTable,
			Columns: []string{invertindexcompressed.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iicuo.mutation.TermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   invertindexcompressed.TermTable,
			Columns: []string{invertindexcompressed.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InvertIndexCompressed{config: iicuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iicuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invertindexcompressed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
