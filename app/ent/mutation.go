// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/YadaYuki/omochi/app/ent/document"
	"github.com/YadaYuki/omochi/app/ent/invertindexcompressed"
	"github.com/YadaYuki/omochi/app/ent/predicate"
	"github.com/YadaYuki/omochi/app/ent/term"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDocument              = "Document"
	TypeInvertIndexCompressed = "InvertIndexCompressed"
	TypeTerm                  = "Term"
)

// DocumentMutation represents an operation that mutates the Document nodes in the graph.
type DocumentMutation struct {
	config
	op                Op
	typ               string
	id                *int
	created_at        *time.Time
	updated_at        *time.Time
	content           *string
	tokenized_content *string
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Document, error)
	predicates        []predicate.Document
}

var _ ent.Mutation = (*DocumentMutation)(nil)

// documentOption allows management of the mutation configuration using functional options.
type documentOption func(*DocumentMutation)

// newDocumentMutation creates new mutation for the Document entity.
func newDocumentMutation(c config, op Op, opts ...documentOption) *DocumentMutation {
	m := &DocumentMutation{
		config:        c,
		op:            op,
		typ:           TypeDocument,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDocumentID sets the ID field of the mutation.
func withDocumentID(id int) documentOption {
	return func(m *DocumentMutation) {
		var (
			err   error
			once  sync.Once
			value *Document
		)
		m.oldValue = func(ctx context.Context) (*Document, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Document.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDocument sets the old Document of the mutation.
func withDocument(node *Document) documentOption {
	return func(m *DocumentMutation) {
		m.oldValue = func(context.Context) (*Document, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DocumentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DocumentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DocumentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DocumentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Document.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DocumentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DocumentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Document entity.
// If the Document object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DocumentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DocumentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DocumentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DocumentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Document entity.
// If the Document object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DocumentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DocumentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetContent sets the "content" field.
func (m *DocumentMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *DocumentMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Document entity.
// If the Document object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DocumentMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *DocumentMutation) ResetContent() {
	m.content = nil
}

// SetTokenizedContent sets the "tokenized_content" field.
func (m *DocumentMutation) SetTokenizedContent(s string) {
	m.tokenized_content = &s
}

// TokenizedContent returns the value of the "tokenized_content" field in the mutation.
func (m *DocumentMutation) TokenizedContent() (r string, exists bool) {
	v := m.tokenized_content
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenizedContent returns the old "tokenized_content" field's value of the Document entity.
// If the Document object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DocumentMutation) OldTokenizedContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenizedContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenizedContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenizedContent: %w", err)
	}
	return oldValue.TokenizedContent, nil
}

// ResetTokenizedContent resets all changes to the "tokenized_content" field.
func (m *DocumentMutation) ResetTokenizedContent() {
	m.tokenized_content = nil
}

// Where appends a list predicates to the DocumentMutation builder.
func (m *DocumentMutation) Where(ps ...predicate.Document) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DocumentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Document).
func (m *DocumentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DocumentMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, document.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, document.FieldUpdatedAt)
	}
	if m.content != nil {
		fields = append(fields, document.FieldContent)
	}
	if m.tokenized_content != nil {
		fields = append(fields, document.FieldTokenizedContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DocumentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case document.FieldCreatedAt:
		return m.CreatedAt()
	case document.FieldUpdatedAt:
		return m.UpdatedAt()
	case document.FieldContent:
		return m.Content()
	case document.FieldTokenizedContent:
		return m.TokenizedContent()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DocumentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case document.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case document.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case document.FieldContent:
		return m.OldContent(ctx)
	case document.FieldTokenizedContent:
		return m.OldTokenizedContent(ctx)
	}
	return nil, fmt.Errorf("unknown Document field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DocumentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case document.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case document.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case document.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case document.FieldTokenizedContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenizedContent(v)
		return nil
	}
	return fmt.Errorf("unknown Document field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DocumentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DocumentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DocumentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Document numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DocumentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DocumentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DocumentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Document nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DocumentMutation) ResetField(name string) error {
	switch name {
	case document.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case document.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case document.FieldContent:
		m.ResetContent()
		return nil
	case document.FieldTokenizedContent:
		m.ResetTokenizedContent()
		return nil
	}
	return fmt.Errorf("unknown Document field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DocumentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DocumentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DocumentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DocumentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DocumentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DocumentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DocumentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Document unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DocumentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Document edge %s", name)
}

// InvertIndexCompressedMutation represents an operation that mutates the InvertIndexCompressed nodes in the graph.
type InvertIndexCompressedMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	created_at              *time.Time
	updated_at              *time.Time
	posting_list_compressed *[]byte
	clearedFields           map[string]struct{}
	term_related            *uuid.UUID
	clearedterm_related     bool
	done                    bool
	oldValue                func(context.Context) (*InvertIndexCompressed, error)
	predicates              []predicate.InvertIndexCompressed
}

var _ ent.Mutation = (*InvertIndexCompressedMutation)(nil)

// invertindexcompressedOption allows management of the mutation configuration using functional options.
type invertindexcompressedOption func(*InvertIndexCompressedMutation)

// newInvertIndexCompressedMutation creates new mutation for the InvertIndexCompressed entity.
func newInvertIndexCompressedMutation(c config, op Op, opts ...invertindexcompressedOption) *InvertIndexCompressedMutation {
	m := &InvertIndexCompressedMutation{
		config:        c,
		op:            op,
		typ:           TypeInvertIndexCompressed,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInvertIndexCompressedID sets the ID field of the mutation.
func withInvertIndexCompressedID(id uuid.UUID) invertindexcompressedOption {
	return func(m *InvertIndexCompressedMutation) {
		var (
			err   error
			once  sync.Once
			value *InvertIndexCompressed
		)
		m.oldValue = func(ctx context.Context) (*InvertIndexCompressed, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().InvertIndexCompressed.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInvertIndexCompressed sets the old InvertIndexCompressed of the mutation.
func withInvertIndexCompressed(node *InvertIndexCompressed) invertindexcompressedOption {
	return func(m *InvertIndexCompressedMutation) {
		m.oldValue = func(context.Context) (*InvertIndexCompressed, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InvertIndexCompressedMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InvertIndexCompressedMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of InvertIndexCompressed entities.
func (m *InvertIndexCompressedMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InvertIndexCompressedMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InvertIndexCompressedMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().InvertIndexCompressed.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *InvertIndexCompressedMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *InvertIndexCompressedMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the InvertIndexCompressed entity.
// If the InvertIndexCompressed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvertIndexCompressedMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *InvertIndexCompressedMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *InvertIndexCompressedMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *InvertIndexCompressedMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the InvertIndexCompressed entity.
// If the InvertIndexCompressed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvertIndexCompressedMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *InvertIndexCompressedMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetPostingListCompressed sets the "posting_list_compressed" field.
func (m *InvertIndexCompressedMutation) SetPostingListCompressed(b []byte) {
	m.posting_list_compressed = &b
}

// PostingListCompressed returns the value of the "posting_list_compressed" field in the mutation.
func (m *InvertIndexCompressedMutation) PostingListCompressed() (r []byte, exists bool) {
	v := m.posting_list_compressed
	if v == nil {
		return
	}
	return *v, true
}

// OldPostingListCompressed returns the old "posting_list_compressed" field's value of the InvertIndexCompressed entity.
// If the InvertIndexCompressed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvertIndexCompressedMutation) OldPostingListCompressed(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostingListCompressed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostingListCompressed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostingListCompressed: %w", err)
	}
	return oldValue.PostingListCompressed, nil
}

// ResetPostingListCompressed resets all changes to the "posting_list_compressed" field.
func (m *InvertIndexCompressedMutation) ResetPostingListCompressed() {
	m.posting_list_compressed = nil
}

// SetTermRelatedID sets the "term_related" edge to the Term entity by id.
func (m *InvertIndexCompressedMutation) SetTermRelatedID(id uuid.UUID) {
	m.term_related = &id
}

// ClearTermRelated clears the "term_related" edge to the Term entity.
func (m *InvertIndexCompressedMutation) ClearTermRelated() {
	m.clearedterm_related = true
}

// TermRelatedCleared reports if the "term_related" edge to the Term entity was cleared.
func (m *InvertIndexCompressedMutation) TermRelatedCleared() bool {
	return m.clearedterm_related
}

// TermRelatedID returns the "term_related" edge ID in the mutation.
func (m *InvertIndexCompressedMutation) TermRelatedID() (id uuid.UUID, exists bool) {
	if m.term_related != nil {
		return *m.term_related, true
	}
	return
}

// TermRelatedIDs returns the "term_related" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TermRelatedID instead. It exists only for internal usage by the builders.
func (m *InvertIndexCompressedMutation) TermRelatedIDs() (ids []uuid.UUID) {
	if id := m.term_related; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTermRelated resets all changes to the "term_related" edge.
func (m *InvertIndexCompressedMutation) ResetTermRelated() {
	m.term_related = nil
	m.clearedterm_related = false
}

// Where appends a list predicates to the InvertIndexCompressedMutation builder.
func (m *InvertIndexCompressedMutation) Where(ps ...predicate.InvertIndexCompressed) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *InvertIndexCompressedMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (InvertIndexCompressed).
func (m *InvertIndexCompressedMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InvertIndexCompressedMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, invertindexcompressed.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, invertindexcompressed.FieldUpdatedAt)
	}
	if m.posting_list_compressed != nil {
		fields = append(fields, invertindexcompressed.FieldPostingListCompressed)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InvertIndexCompressedMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case invertindexcompressed.FieldCreatedAt:
		return m.CreatedAt()
	case invertindexcompressed.FieldUpdatedAt:
		return m.UpdatedAt()
	case invertindexcompressed.FieldPostingListCompressed:
		return m.PostingListCompressed()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InvertIndexCompressedMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case invertindexcompressed.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case invertindexcompressed.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case invertindexcompressed.FieldPostingListCompressed:
		return m.OldPostingListCompressed(ctx)
	}
	return nil, fmt.Errorf("unknown InvertIndexCompressed field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvertIndexCompressedMutation) SetField(name string, value ent.Value) error {
	switch name {
	case invertindexcompressed.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case invertindexcompressed.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case invertindexcompressed.FieldPostingListCompressed:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostingListCompressed(v)
		return nil
	}
	return fmt.Errorf("unknown InvertIndexCompressed field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InvertIndexCompressedMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InvertIndexCompressedMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvertIndexCompressedMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown InvertIndexCompressed numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InvertIndexCompressedMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InvertIndexCompressedMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InvertIndexCompressedMutation) ClearField(name string) error {
	return fmt.Errorf("unknown InvertIndexCompressed nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InvertIndexCompressedMutation) ResetField(name string) error {
	switch name {
	case invertindexcompressed.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case invertindexcompressed.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case invertindexcompressed.FieldPostingListCompressed:
		m.ResetPostingListCompressed()
		return nil
	}
	return fmt.Errorf("unknown InvertIndexCompressed field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InvertIndexCompressedMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.term_related != nil {
		edges = append(edges, invertindexcompressed.EdgeTermRelated)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InvertIndexCompressedMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case invertindexcompressed.EdgeTermRelated:
		if id := m.term_related; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InvertIndexCompressedMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InvertIndexCompressedMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InvertIndexCompressedMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedterm_related {
		edges = append(edges, invertindexcompressed.EdgeTermRelated)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InvertIndexCompressedMutation) EdgeCleared(name string) bool {
	switch name {
	case invertindexcompressed.EdgeTermRelated:
		return m.clearedterm_related
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InvertIndexCompressedMutation) ClearEdge(name string) error {
	switch name {
	case invertindexcompressed.EdgeTermRelated:
		m.ClearTermRelated()
		return nil
	}
	return fmt.Errorf("unknown InvertIndexCompressed unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InvertIndexCompressedMutation) ResetEdge(name string) error {
	switch name {
	case invertindexcompressed.EdgeTermRelated:
		m.ResetTermRelated()
		return nil
	}
	return fmt.Errorf("unknown InvertIndexCompressed edge %s", name)
}

// TermMutation represents an operation that mutates the Term nodes in the graph.
type TermMutation struct {
	config
	op                             Op
	typ                            string
	id                             *uuid.UUID
	created_at                     *time.Time
	updated_at                     *time.Time
	word                           *string
	clearedFields                  map[string]struct{}
	invert_index_compressed        *uuid.UUID
	clearedinvert_index_compressed bool
	done                           bool
	oldValue                       func(context.Context) (*Term, error)
	predicates                     []predicate.Term
}

var _ ent.Mutation = (*TermMutation)(nil)

// termOption allows management of the mutation configuration using functional options.
type termOption func(*TermMutation)

// newTermMutation creates new mutation for the Term entity.
func newTermMutation(c config, op Op, opts ...termOption) *TermMutation {
	m := &TermMutation{
		config:        c,
		op:            op,
		typ:           TypeTerm,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTermID sets the ID field of the mutation.
func withTermID(id uuid.UUID) termOption {
	return func(m *TermMutation) {
		var (
			err   error
			once  sync.Once
			value *Term
		)
		m.oldValue = func(ctx context.Context) (*Term, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Term.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTerm sets the old Term of the mutation.
func withTerm(node *Term) termOption {
	return func(m *TermMutation) {
		m.oldValue = func(context.Context) (*Term, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TermMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TermMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Term entities.
func (m *TermMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TermMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TermMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Term.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TermMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TermMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Term entity.
// If the Term object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TermMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TermMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TermMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TermMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Term entity.
// If the Term object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TermMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TermMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetWord sets the "word" field.
func (m *TermMutation) SetWord(s string) {
	m.word = &s
}

// Word returns the value of the "word" field in the mutation.
func (m *TermMutation) Word() (r string, exists bool) {
	v := m.word
	if v == nil {
		return
	}
	return *v, true
}

// OldWord returns the old "word" field's value of the Term entity.
// If the Term object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TermMutation) OldWord(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWord is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWord requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWord: %w", err)
	}
	return oldValue.Word, nil
}

// ResetWord resets all changes to the "word" field.
func (m *TermMutation) ResetWord() {
	m.word = nil
}

// SetInvertIndexCompressedID sets the "invert_index_compressed" edge to the InvertIndexCompressed entity by id.
func (m *TermMutation) SetInvertIndexCompressedID(id uuid.UUID) {
	m.invert_index_compressed = &id
}

// ClearInvertIndexCompressed clears the "invert_index_compressed" edge to the InvertIndexCompressed entity.
func (m *TermMutation) ClearInvertIndexCompressed() {
	m.clearedinvert_index_compressed = true
}

// InvertIndexCompressedCleared reports if the "invert_index_compressed" edge to the InvertIndexCompressed entity was cleared.
func (m *TermMutation) InvertIndexCompressedCleared() bool {
	return m.clearedinvert_index_compressed
}

// InvertIndexCompressedID returns the "invert_index_compressed" edge ID in the mutation.
func (m *TermMutation) InvertIndexCompressedID() (id uuid.UUID, exists bool) {
	if m.invert_index_compressed != nil {
		return *m.invert_index_compressed, true
	}
	return
}

// InvertIndexCompressedIDs returns the "invert_index_compressed" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// InvertIndexCompressedID instead. It exists only for internal usage by the builders.
func (m *TermMutation) InvertIndexCompressedIDs() (ids []uuid.UUID) {
	if id := m.invert_index_compressed; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetInvertIndexCompressed resets all changes to the "invert_index_compressed" edge.
func (m *TermMutation) ResetInvertIndexCompressed() {
	m.invert_index_compressed = nil
	m.clearedinvert_index_compressed = false
}

// Where appends a list predicates to the TermMutation builder.
func (m *TermMutation) Where(ps ...predicate.Term) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TermMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Term).
func (m *TermMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TermMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, term.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, term.FieldUpdatedAt)
	}
	if m.word != nil {
		fields = append(fields, term.FieldWord)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TermMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case term.FieldCreatedAt:
		return m.CreatedAt()
	case term.FieldUpdatedAt:
		return m.UpdatedAt()
	case term.FieldWord:
		return m.Word()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TermMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case term.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case term.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case term.FieldWord:
		return m.OldWord(ctx)
	}
	return nil, fmt.Errorf("unknown Term field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TermMutation) SetField(name string, value ent.Value) error {
	switch name {
	case term.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case term.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case term.FieldWord:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWord(v)
		return nil
	}
	return fmt.Errorf("unknown Term field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TermMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TermMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TermMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Term numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TermMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TermMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TermMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Term nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TermMutation) ResetField(name string) error {
	switch name {
	case term.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case term.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case term.FieldWord:
		m.ResetWord()
		return nil
	}
	return fmt.Errorf("unknown Term field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TermMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.invert_index_compressed != nil {
		edges = append(edges, term.EdgeInvertIndexCompressed)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TermMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case term.EdgeInvertIndexCompressed:
		if id := m.invert_index_compressed; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TermMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TermMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TermMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedinvert_index_compressed {
		edges = append(edges, term.EdgeInvertIndexCompressed)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TermMutation) EdgeCleared(name string) bool {
	switch name {
	case term.EdgeInvertIndexCompressed:
		return m.clearedinvert_index_compressed
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TermMutation) ClearEdge(name string) error {
	switch name {
	case term.EdgeInvertIndexCompressed:
		m.ClearInvertIndexCompressed()
		return nil
	}
	return fmt.Errorf("unknown Term unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TermMutation) ResetEdge(name string) error {
	switch name {
	case term.EdgeInvertIndexCompressed:
		m.ResetInvertIndexCompressed()
		return nil
	}
	return fmt.Errorf("unknown Term edge %s", name)
}
