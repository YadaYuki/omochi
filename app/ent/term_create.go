// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/YadaYuki/omochi/app/ent/term"
	"github.com/google/uuid"
)

// TermCreate is the builder for creating a Term entity.
type TermCreate struct {
	config
	mutation *TermMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TermCreate) SetCreatedAt(t time.Time) *TermCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TermCreate) SetNillableCreatedAt(t *time.Time) *TermCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TermCreate) SetUpdatedAt(t time.Time) *TermCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TermCreate) SetNillableUpdatedAt(t *time.Time) *TermCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetWord sets the "word" field.
func (tc *TermCreate) SetWord(s string) *TermCreate {
	tc.mutation.SetWord(s)
	return tc
}

// SetPostingListCompressed sets the "posting_list_compressed" field.
func (tc *TermCreate) SetPostingListCompressed(b []byte) *TermCreate {
	tc.mutation.SetPostingListCompressed(b)
	return tc
}

// SetID sets the "id" field.
func (tc *TermCreate) SetID(u uuid.UUID) *TermCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TermCreate) SetNillableID(u *uuid.UUID) *TermCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// Mutation returns the TermMutation object of the builder.
func (tc *TermCreate) Mutation() *TermMutation {
	return tc.mutation
}

// Save creates the Term in the database.
func (tc *TermCreate) Save(ctx context.Context) (*Term, error) {
	var (
		err  error
		node *Term
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TermMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TermCreate) SaveX(ctx context.Context) *Term {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TermCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TermCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TermCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := term.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := term.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := term.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TermCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Term.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Term.updated_at"`)}
	}
	if _, ok := tc.mutation.Word(); !ok {
		return &ValidationError{Name: "word", err: errors.New(`ent: missing required field "Term.word"`)}
	}
	if _, ok := tc.mutation.PostingListCompressed(); !ok {
		return &ValidationError{Name: "posting_list_compressed", err: errors.New(`ent: missing required field "Term.posting_list_compressed"`)}
	}
	if v, ok := tc.mutation.PostingListCompressed(); ok {
		if err := term.PostingListCompressedValidator(v); err != nil {
			return &ValidationError{Name: "posting_list_compressed", err: fmt.Errorf(`ent: validator failed for field "Term.posting_list_compressed": %w`, err)}
		}
	}
	return nil
}

func (tc *TermCreate) sqlSave(ctx context.Context) (*Term, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tc *TermCreate) createSpec() (*Term, *sqlgraph.CreateSpec) {
	var (
		_node = &Term{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: term.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: term.FieldID,
			},
		}
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: term.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: term.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.Word(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: term.FieldWord,
		})
		_node.Word = value
	}
	if value, ok := tc.mutation.PostingListCompressed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: term.FieldPostingListCompressed,
		})
		_node.PostingListCompressed = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Term.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TermUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (tc *TermCreate) OnConflict(opts ...sql.ConflictOption) *TermUpsertOne {
	tc.conflict = opts
	return &TermUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Term.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tc *TermCreate) OnConflictColumns(columns ...string) *TermUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TermUpsertOne{
		create: tc,
	}
}

type (
	// TermUpsertOne is the builder for "upsert"-ing
	//  one Term node.
	TermUpsertOne struct {
		create *TermCreate
	}

	// TermUpsert is the "OnConflict" setter.
	TermUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *TermUpsert) SetCreatedAt(v time.Time) *TermUpsert {
	u.Set(term.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TermUpsert) UpdateCreatedAt() *TermUpsert {
	u.SetExcluded(term.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TermUpsert) SetUpdatedAt(v time.Time) *TermUpsert {
	u.Set(term.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TermUpsert) UpdateUpdatedAt() *TermUpsert {
	u.SetExcluded(term.FieldUpdatedAt)
	return u
}

// SetWord sets the "word" field.
func (u *TermUpsert) SetWord(v string) *TermUpsert {
	u.Set(term.FieldWord, v)
	return u
}

// UpdateWord sets the "word" field to the value that was provided on create.
func (u *TermUpsert) UpdateWord() *TermUpsert {
	u.SetExcluded(term.FieldWord)
	return u
}

// SetPostingListCompressed sets the "posting_list_compressed" field.
func (u *TermUpsert) SetPostingListCompressed(v []byte) *TermUpsert {
	u.Set(term.FieldPostingListCompressed, v)
	return u
}

// UpdatePostingListCompressed sets the "posting_list_compressed" field to the value that was provided on create.
func (u *TermUpsert) UpdatePostingListCompressed() *TermUpsert {
	u.SetExcluded(term.FieldPostingListCompressed)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Term.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(term.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TermUpsertOne) UpdateNewValues() *TermUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(term.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(term.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Term.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TermUpsertOne) Ignore() *TermUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TermUpsertOne) DoNothing() *TermUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TermCreate.OnConflict
// documentation for more info.
func (u *TermUpsertOne) Update(set func(*TermUpsert)) *TermUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TermUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TermUpsertOne) SetCreatedAt(v time.Time) *TermUpsertOne {
	return u.Update(func(s *TermUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TermUpsertOne) UpdateCreatedAt() *TermUpsertOne {
	return u.Update(func(s *TermUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TermUpsertOne) SetUpdatedAt(v time.Time) *TermUpsertOne {
	return u.Update(func(s *TermUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TermUpsertOne) UpdateUpdatedAt() *TermUpsertOne {
	return u.Update(func(s *TermUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetWord sets the "word" field.
func (u *TermUpsertOne) SetWord(v string) *TermUpsertOne {
	return u.Update(func(s *TermUpsert) {
		s.SetWord(v)
	})
}

// UpdateWord sets the "word" field to the value that was provided on create.
func (u *TermUpsertOne) UpdateWord() *TermUpsertOne {
	return u.Update(func(s *TermUpsert) {
		s.UpdateWord()
	})
}

// SetPostingListCompressed sets the "posting_list_compressed" field.
func (u *TermUpsertOne) SetPostingListCompressed(v []byte) *TermUpsertOne {
	return u.Update(func(s *TermUpsert) {
		s.SetPostingListCompressed(v)
	})
}

// UpdatePostingListCompressed sets the "posting_list_compressed" field to the value that was provided on create.
func (u *TermUpsertOne) UpdatePostingListCompressed() *TermUpsertOne {
	return u.Update(func(s *TermUpsert) {
		s.UpdatePostingListCompressed()
	})
}

// Exec executes the query.
func (u *TermUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TermCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TermUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TermUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TermUpsertOne.ID is not supported by MySQL driver. Use TermUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TermUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TermCreateBulk is the builder for creating many Term entities in bulk.
type TermCreateBulk struct {
	config
	builders []*TermCreate
	conflict []sql.ConflictOption
}

// Save creates the Term entities in the database.
func (tcb *TermCreateBulk) Save(ctx context.Context) ([]*Term, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Term, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TermMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TermCreateBulk) SaveX(ctx context.Context) []*Term {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TermCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TermCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Term.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TermUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (tcb *TermCreateBulk) OnConflict(opts ...sql.ConflictOption) *TermUpsertBulk {
	tcb.conflict = opts
	return &TermUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Term.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tcb *TermCreateBulk) OnConflictColumns(columns ...string) *TermUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TermUpsertBulk{
		create: tcb,
	}
}

// TermUpsertBulk is the builder for "upsert"-ing
// a bulk of Term nodes.
type TermUpsertBulk struct {
	create *TermCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Term.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(term.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TermUpsertBulk) UpdateNewValues() *TermUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(term.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(term.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Term.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TermUpsertBulk) Ignore() *TermUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TermUpsertBulk) DoNothing() *TermUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TermCreateBulk.OnConflict
// documentation for more info.
func (u *TermUpsertBulk) Update(set func(*TermUpsert)) *TermUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TermUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TermUpsertBulk) SetCreatedAt(v time.Time) *TermUpsertBulk {
	return u.Update(func(s *TermUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TermUpsertBulk) UpdateCreatedAt() *TermUpsertBulk {
	return u.Update(func(s *TermUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TermUpsertBulk) SetUpdatedAt(v time.Time) *TermUpsertBulk {
	return u.Update(func(s *TermUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TermUpsertBulk) UpdateUpdatedAt() *TermUpsertBulk {
	return u.Update(func(s *TermUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetWord sets the "word" field.
func (u *TermUpsertBulk) SetWord(v string) *TermUpsertBulk {
	return u.Update(func(s *TermUpsert) {
		s.SetWord(v)
	})
}

// UpdateWord sets the "word" field to the value that was provided on create.
func (u *TermUpsertBulk) UpdateWord() *TermUpsertBulk {
	return u.Update(func(s *TermUpsert) {
		s.UpdateWord()
	})
}

// SetPostingListCompressed sets the "posting_list_compressed" field.
func (u *TermUpsertBulk) SetPostingListCompressed(v []byte) *TermUpsertBulk {
	return u.Update(func(s *TermUpsert) {
		s.SetPostingListCompressed(v)
	})
}

// UpdatePostingListCompressed sets the "posting_list_compressed" field to the value that was provided on create.
func (u *TermUpsertBulk) UpdatePostingListCompressed() *TermUpsertBulk {
	return u.Update(func(s *TermUpsert) {
		s.UpdatePostingListCompressed()
	})
}

// Exec executes the query.
func (u *TermUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TermCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TermCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TermUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
