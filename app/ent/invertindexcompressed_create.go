// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/YadaYuki/omochi/app/ent/invertindexcompressed"
	"github.com/YadaYuki/omochi/app/ent/term"
	"github.com/google/uuid"
)

// InvertIndexCompressedCreate is the builder for creating a InvertIndexCompressed entity.
type InvertIndexCompressedCreate struct {
	config
	mutation *InvertIndexCompressedMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (iicc *InvertIndexCompressedCreate) SetCreatedAt(t time.Time) *InvertIndexCompressedCreate {
	iicc.mutation.SetCreatedAt(t)
	return iicc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iicc *InvertIndexCompressedCreate) SetNillableCreatedAt(t *time.Time) *InvertIndexCompressedCreate {
	if t != nil {
		iicc.SetCreatedAt(*t)
	}
	return iicc
}

// SetUpdatedAt sets the "updated_at" field.
func (iicc *InvertIndexCompressedCreate) SetUpdatedAt(t time.Time) *InvertIndexCompressedCreate {
	iicc.mutation.SetUpdatedAt(t)
	return iicc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iicc *InvertIndexCompressedCreate) SetNillableUpdatedAt(t *time.Time) *InvertIndexCompressedCreate {
	if t != nil {
		iicc.SetUpdatedAt(*t)
	}
	return iicc
}

// SetPostingListCompressed sets the "posting_list_compressed" field.
func (iicc *InvertIndexCompressedCreate) SetPostingListCompressed(b []byte) *InvertIndexCompressedCreate {
	iicc.mutation.SetPostingListCompressed(b)
	return iicc
}

// SetID sets the "id" field.
func (iicc *InvertIndexCompressedCreate) SetID(u uuid.UUID) *InvertIndexCompressedCreate {
	iicc.mutation.SetID(u)
	return iicc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (iicc *InvertIndexCompressedCreate) SetNillableID(u *uuid.UUID) *InvertIndexCompressedCreate {
	if u != nil {
		iicc.SetID(*u)
	}
	return iicc
}

// SetTermID sets the "term" edge to the Term entity by ID.
func (iicc *InvertIndexCompressedCreate) SetTermID(id uuid.UUID) *InvertIndexCompressedCreate {
	iicc.mutation.SetTermID(id)
	return iicc
}

// SetNillableTermID sets the "term" edge to the Term entity by ID if the given value is not nil.
func (iicc *InvertIndexCompressedCreate) SetNillableTermID(id *uuid.UUID) *InvertIndexCompressedCreate {
	if id != nil {
		iicc = iicc.SetTermID(*id)
	}
	return iicc
}

// SetTerm sets the "term" edge to the Term entity.
func (iicc *InvertIndexCompressedCreate) SetTerm(t *Term) *InvertIndexCompressedCreate {
	return iicc.SetTermID(t.ID)
}

// Mutation returns the InvertIndexCompressedMutation object of the builder.
func (iicc *InvertIndexCompressedCreate) Mutation() *InvertIndexCompressedMutation {
	return iicc.mutation
}

// Save creates the InvertIndexCompressed in the database.
func (iicc *InvertIndexCompressedCreate) Save(ctx context.Context) (*InvertIndexCompressed, error) {
	var (
		err  error
		node *InvertIndexCompressed
	)
	iicc.defaults()
	if len(iicc.hooks) == 0 {
		if err = iicc.check(); err != nil {
			return nil, err
		}
		node, err = iicc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InvertIndexCompressedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iicc.check(); err != nil {
				return nil, err
			}
			iicc.mutation = mutation
			if node, err = iicc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(iicc.hooks) - 1; i >= 0; i-- {
			if iicc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iicc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iicc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (iicc *InvertIndexCompressedCreate) SaveX(ctx context.Context) *InvertIndexCompressed {
	v, err := iicc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iicc *InvertIndexCompressedCreate) Exec(ctx context.Context) error {
	_, err := iicc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iicc *InvertIndexCompressedCreate) ExecX(ctx context.Context) {
	if err := iicc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iicc *InvertIndexCompressedCreate) defaults() {
	if _, ok := iicc.mutation.CreatedAt(); !ok {
		v := invertindexcompressed.DefaultCreatedAt()
		iicc.mutation.SetCreatedAt(v)
	}
	if _, ok := iicc.mutation.UpdatedAt(); !ok {
		v := invertindexcompressed.DefaultUpdatedAt()
		iicc.mutation.SetUpdatedAt(v)
	}
	if _, ok := iicc.mutation.ID(); !ok {
		v := invertindexcompressed.DefaultID()
		iicc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iicc *InvertIndexCompressedCreate) check() error {
	if _, ok := iicc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "InvertIndexCompressed.created_at"`)}
	}
	if _, ok := iicc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "InvertIndexCompressed.updated_at"`)}
	}
	if _, ok := iicc.mutation.PostingListCompressed(); !ok {
		return &ValidationError{Name: "posting_list_compressed", err: errors.New(`ent: missing required field "InvertIndexCompressed.posting_list_compressed"`)}
	}
	if v, ok := iicc.mutation.PostingListCompressed(); ok {
		if err := invertindexcompressed.PostingListCompressedValidator(v); err != nil {
			return &ValidationError{Name: "posting_list_compressed", err: fmt.Errorf(`ent: validator failed for field "InvertIndexCompressed.posting_list_compressed": %w`, err)}
		}
	}
	return nil
}

func (iicc *InvertIndexCompressedCreate) sqlSave(ctx context.Context) (*InvertIndexCompressed, error) {
	_node, _spec := iicc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iicc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (iicc *InvertIndexCompressedCreate) createSpec() (*InvertIndexCompressed, *sqlgraph.CreateSpec) {
	var (
		_node = &InvertIndexCompressed{config: iicc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: invertindexcompressed.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: invertindexcompressed.FieldID,
			},
		}
	)
	if id, ok := iicc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := iicc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: invertindexcompressed.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := iicc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: invertindexcompressed.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := iicc.mutation.PostingListCompressed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: invertindexcompressed.FieldPostingListCompressed,
		})
		_node.PostingListCompressed = value
	}
	if nodes := iicc.mutation.TermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   invertindexcompressed.TermTable,
			Columns: []string{invertindexcompressed.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InvertIndexCompressedCreateBulk is the builder for creating many InvertIndexCompressed entities in bulk.
type InvertIndexCompressedCreateBulk struct {
	config
	builders []*InvertIndexCompressedCreate
}

// Save creates the InvertIndexCompressed entities in the database.
func (iiccb *InvertIndexCompressedCreateBulk) Save(ctx context.Context) ([]*InvertIndexCompressed, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iiccb.builders))
	nodes := make([]*InvertIndexCompressed, len(iiccb.builders))
	mutators := make([]Mutator, len(iiccb.builders))
	for i := range iiccb.builders {
		func(i int, root context.Context) {
			builder := iiccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvertIndexCompressedMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iiccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iiccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iiccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iiccb *InvertIndexCompressedCreateBulk) SaveX(ctx context.Context) []*InvertIndexCompressed {
	v, err := iiccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iiccb *InvertIndexCompressedCreateBulk) Exec(ctx context.Context) error {
	_, err := iiccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiccb *InvertIndexCompressedCreateBulk) ExecX(ctx context.Context) {
	if err := iiccb.Exec(ctx); err != nil {
		panic(err)
	}
}
